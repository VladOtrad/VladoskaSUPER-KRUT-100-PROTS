"use strict";
/*
 * Copyright 2019-Present Sonatype Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const TestHelper_1 = __importStar(require("../Tests/TestHelper"));
const AuditOSSIndex_1 = require("./AuditOSSIndex");
let auditOSSIndex;
const write = () => {
    // NO-OP
    return true;
};
const oldWrite = process.stdout.write;
const doAuditOSSIndex = (results) => {
    process.stdout.write = write;
    const auditResult = auditOSSIndex.auditResults(results);
    process.stdout.write = oldWrite;
    return auditResult;
};
describe('AuditOSSIndex', () => {
    beforeEach(() => {
        auditOSSIndex = new AuditOSSIndex_1.AuditOSSIndex();
    });
    it('should return true if OSS Index results have vulnerabilities', () => {
        const results = new Array();
        results.push(TestHelper_1.ossIndexObject);
        const result = doAuditOSSIndex(results);
        (0, TestHelper_1.default)(result).to.equal(true);
    });
    it('should return true if OSS Index results have vulnerabilities, and json print is chosen', () => {
        auditOSSIndex = new AuditOSSIndex_1.AuditOSSIndex(false, true);
        const results = new Array();
        results.push(TestHelper_1.ossIndexObject);
        const result = doAuditOSSIndex(results);
        (0, TestHelper_1.default)(result).to.equal(true);
    });
    it('should return false if OSS Index results have no vulnerabilities', () => {
        const results = new Array();
        results.push(TestHelper_1.ossIndexObjectNoVulnerabilities);
        const result = doAuditOSSIndex(results);
        (0, TestHelper_1.default)(result).to.equal(false);
    });
    it('should return false if OSS Index results have no vulnerabilities, and json print is chosen', () => {
        auditOSSIndex = new AuditOSSIndex_1.AuditOSSIndex(false, true);
        const results = new Array();
        results.push(TestHelper_1.ossIndexObjectNoVulnerabilities);
        const result = doAuditOSSIndex(results);
        (0, TestHelper_1.default)(result).to.equal(false);
    });
});
//# sourceMappingURL=AuditOSSIndex.spec.js.map
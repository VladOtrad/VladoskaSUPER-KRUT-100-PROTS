"use strict";
/*
 * Copyright 2019-Present Sonatype Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OssIndexServerConfig = void 0;
const Config_1 = require("./Config");
const fs_1 = require("fs");
const js_yaml_1 = require("js-yaml");
const node_persist_1 = __importDefault(require("node-persist"));
class OssIndexServerConfig extends Config_1.Config {
    constructor(username = '', token = '', cacheLocation = '') {
        super('ossi', username, token);
        this.username = username;
        this.token = token;
        this.cacheLocation = cacheLocation;
        if (this.exists()) {
            this.getConfigFromFile();
        }
    }
    getUsername() {
        if (this.username != '') {
            return this.username;
        }
        return undefined;
    }
    getToken() {
        if (this.token != '') {
            return this.token;
        }
        return undefined;
    }
    getCacheLocation() {
        if (this.cacheLocation != '') {
            return this.cacheLocation;
        }
        return undefined;
    }
    clearCache() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield node_persist_1.default.init({ dir: this.cacheLocation });
                yield node_persist_1.default.clear();
                return true;
            }
            catch (error) {
                // It's likely an error would only ever occur if there was a permission based issue, so log it and move on
                console.log(error);
                return false;
            }
        });
    }
    getConfigFromFile(saveLocation = this.getConfigLocation()) {
        const doc = (0, js_yaml_1.safeLoad)((0, fs_1.readFileSync)(saveLocation, 'utf8'));
        if (doc && doc.Username) {
            this.username = doc.Username;
        }
        if (doc && doc.Token) {
            this.token = doc.Token;
        }
        if (doc && doc.CacheLocation) {
            this.cacheLocation = doc.CacheLocation;
        }
        return this;
    }
}
exports.OssIndexServerConfig = OssIndexServerConfig;
//# sourceMappingURL=OssIndexServerConfig.js.map
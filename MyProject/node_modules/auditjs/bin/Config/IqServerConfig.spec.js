"use strict";
/*
 * Copyright 2019-Present Sonatype Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TestHelper_1 = __importDefault(require("../Tests/TestHelper"));
const IqServerConfig_1 = require("./IqServerConfig");
const mock_fs_1 = __importDefault(require("mock-fs"));
const sinon_1 = __importDefault(require("sinon"));
const os_1 = __importDefault(require("os"));
const ConfigPersist_1 = require("./ConfigPersist");
describe('IqServerConfig', () => __awaiter(void 0, void 0, void 0, function* () {
    afterEach(() => {
        sinon_1.default.restore();
        mock_fs_1.default.restore();
    });
    it('should return true when it is able to save a config file', () => __awaiter(void 0, void 0, void 0, function* () {
        sinon_1.default.stub(os_1.default, 'homedir').returns('/nonsense');
        (0, mock_fs_1.default)({ '/nonsense': {} });
        const config = new IqServerConfig_1.IqServerConfig();
        const configPersist = new ConfigPersist_1.ConfigPersist('username', 'password', 'http://localhost:8070');
        (0, TestHelper_1.default)(config.saveFile(configPersist)).to.equal(true);
        const conf = config.getConfigFromFile('/nonsense/.iqserver/.iq-server-config');
        (0, TestHelper_1.default)(conf.getUsername()).to.equal('username');
        (0, TestHelper_1.default)(conf.getToken()).to.equal('password');
        (0, TestHelper_1.default)(conf.getHost()).to.equal('http://localhost:8070');
    }));
}));
//# sourceMappingURL=IqServerConfig.spec.js.map